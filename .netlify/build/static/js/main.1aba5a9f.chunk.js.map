{"version":3,"sources":["team-data.js","TeamModal.jsx","teamCard.jsx","TeamColumn.jsx","playerCard.jsx","PlayerColumn.jsx","PlayerPool.jsx","initial-data.js","Mock.js","ShareModal.jsx","DraftCompiler.jsx","App.js","serviceWorker.js","index.js","images/yellow_brown_logo.png"],"names":["teamData","0","name","color","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","HiddenButton","styled","button","TeamModal","props","useState","show","setShow","handleClose","state","value","sendData","parentCallback","id","onClick","teamName","Modal","onHide","Header","closeButton","Title","index","Form","Body","Group","controlId","Control","as","onChange","event","target","Object","keys","map","Footer","Button","variant","StyledCard","Card","ColoredCardBody","div","teamColor","TeamCard","callbackFunction","childData","teams","teamId","content","parseInt","newState2","setState","console","log","draggableId","this","provided","snapshot","draggableProps","dragHandleProps","innerRef","ref","isDragging","Text","round","React","Component","Container","DraftList","isDraggingOver","TeamColumn","title","teamIds","column","droppableId","droppableProps","key","placeholder","StyledCardHeader","StyledCardBody","PlayerCard","playerId","playerName","players","pos","PlayerList","includes","draggingOverWith","PlayerColumn","playerIds","allPlayerIds","teamColumn","SearchBar","input","PlayerPool","search","filteredPlayerIds","filter","player","toLowerCase","indexOf","type","updateSearch","bind","request","XMLHttpRequest","open","send","initialData","playerFile2","columns","columnOrder","draftOrder","DraftTable","Mock","refreshTable","onDragEnd","result","destination","source","mockPage","newTeamIds","Array","from","splice","newColumn","newState","changeMockCallback","mockIndex","startColumn","finishColumn","newPlayerIds","length","startPlayerIds","finishPlayerIds","newStartColumn","newFinishColumn","newAltState","columnId","actualTeams","teamSetup","pickedPlayers","unpickedPlayers","draftText","draftInfo","text","ids","redditFormat","excelFormat","newLine","chosenPick","position","school","DraftCompiler","ShareModal","draftOutput","i","allInfo","allData","totalIds","totalTeams","totalPickedPlayers","totalPlayers","totalRounds","concat","mocks","assign","setupOrder","rows","defaultValue","Top","maxRounds","maxMockPages","prevArrow","nextArrow","currentMock","message","currentMockObj","globalPlayerPool","changeMockPageData","defaultOrder","filledTeamIds","counter","push","filledTeamIds2","defaultOrder2","className","src","logo","alt","ToggleButtonGroup","size","ToggleButton","disabled","teamInfo","active","addMockPage","App","rel","href","integrity","crossorigin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1aba5a9f.chunk.js","sourcesContent":["const teamData = {\n    0: {\n        name: \"Arizona Cardinals\",\n        color: '#97233F'\n    },\n    1: {\n        name: \"Atlanta Falcons\",\n        color: \"#a71930\"\n    },\n    2: {\n        name: \"Baltimore Ravens\",\n        color: \"#241773\"\n    },\n    3: {\n        name: \"Buffalo Bills\",\n        color: \"#00338D\"\n    },\n    4: {\n        name: \"Carolina Panthers\",\n        color: \"#0085CA\"\n    },\n    5: {\n        name: \"Chicago Bears\",\n        color: \"#c83803\"\n    },\n    6: {\n        name: \"Cincinnati Bengals\",\n        color: \"#fb4f14\"\n    },\n    7: {\n        name: \"Cleveland Browns\",\n        color: \"#ff3c00\"\n    },\n    8: {\n        name: \"Dallas Cowboys\",\n        color: \"#041E42\"\n    },\n    9: {\n        name: \"Denver Broncos\",\n        color: \"#FB4F14\"\n    },\n    10: {\n        name: \"Detroit Lions\",\n        color: \"#0076b6\"\n    },\n    11: {\n        name: \"Green Bay Packers\",\n        color: \"#203731\"\n    },\n    12: {\n        name: \"Houston Texans\",\n        color: \"#03202f\"\n    },\n    13: {\n        name: \"Indianapolis Colts\",\n        color: \"#002C5F\"\n    },\n    14: {\n        name: \"Jacksonville Jaguars\",\n        color: \"#006778\"\n    },\n    15: {\n        name: \"Kansas City Chiefs\",\n        color: \"#E31837\"\n    },\n    16: {\n        name: \"Los Angeles Chargers\",\n        color: \"#FFC20E\"\n    },\n    17: {\n        name: \"Los Angeles Rams\",\n        color: \"#002244\"\n    },\n    18: {\n        name: \"Miami Dolphins\",\n        color: \"#008E97\"\n    },\n    19: {\n        name: \"Minnesota Vikings\",\n        color: \"#4F2683\"\n    },\n    20: {\n        name: \"New England Patriots\",\n        color: \"#002244\"\n    },\n    21: {\n        name: \"New Orleans Saints\",\n        color: \"#D3BC8D\"\n    },\n    22: {\n        name: \"New York Giants\",\n        color: \"#0B2265\"\n    },\n    23: {\n        name: \"New York Jets\",\n        color: \"#125740\"\n    },\n    24: {\n        name: \"Las Vegas Raiders\",\n        color: \"#000000\"\n    },\n    25: {\n        name: \"Philadelphia Eagles\",\n        color: \"#004C54\"\n    },\n    26: {\n        name: \"Pittsburgh Steelers\",\n        color: \"#FFB612\"\n    },\n    27: {\n        name: \"San Francisco 49ers\",\n        color: \"#AA0000\"\n    },\n    28: {\n        name: \"Seattle Seahawks\",\n        color: \"#002244\"\n    },\n    29: {\n        name: \"Tampa Bay Buccaneers\",\n        color: \"#D50A0A\"\n    },\n    30: {\n        name: \"Tennessee Titans\",\n        color: \"#4B92DB\"\n    },\n    31: {\n        name: \"Washington Redskins\",\n        color: \"#773141\"\n    }\n}\n\nexport default teamData","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport teamData from './team-data';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport './css/TeamModal.css';\n\nconst HiddenButton = styled.button`\n    \n    background-color: Transparent;\n    background-repeat:no-repeat;\n    border: none;\n    cursor:pointer;\n    overflow: hidden;\n    outline:none;\n    \n`;\n\n\nexport default function TeamModal(props) {\n\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    var state = {\n        value: 0\n    }\n\n\n    const handleChange = (event) => {\n        state = { value: event.target.value }\n\n        sendData();\n        \n    }\n\n    const sendData = () => {\n        props.parentCallback({\n            id: state.id,\n            value: state.value\n        });\n        \n    }\n\n    return (\n        <>\n        <HiddenButton onClick={handleShow}>\n            {props.teamName}\n        </HiddenButton>\n\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pick #{props.index + 1}</Modal.Title>\n            </Modal.Header>\n            <Form>\n                <Modal.Body>Choose Traded Team:<br />\n\n                    <Form.Group controlId=\"exampleForm.ControlSelect2\">\n\n                        <Form.Control as=\"select\" onChange={handleChange}>\n                            {Object.keys(teamData).map((value, index) => (\n                                <option id={index} value={value}>{teamData[value].name} </option>\n                            ))\n                            }\n                        </Form.Control>\n                    </Form.Group>\n\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n            </Button>\n                    <Button variant=\"primary\" onClick={handleClose}>\n                        Save Changes\n            </Button>\n                </Modal.Footer>\n            </Form>\n        </Modal>\n        </>\n    );\n\n}","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport styled from 'styled-components';\nimport teamData from './team-data';\nimport { Draggable } from \"react-beautiful-dnd\";\nimport TeamModal from './TeamModal';\n\n\nconst StyledCard = styled(Card) `\n    \n\n    color: white;\n    background-color: #92a8d1;\n\tfont-size: 1em;\n\tborder-style: solid;\n\t\n\tborder: 4px solid palevioletred;\n\tborder-radius: 3px;\n    margin-bottom: 1%;\n`;\n\nconst ColoredCardBody = styled.div`\n    background-color: ${props => props.teamColor};\n`;\n\n\nexport default class TeamCard extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        const teamId = props.value\n        \n        this.state = {\n            id: props.id,\n            teamId: props.value,\n            teamName: teamData[props.teams[teamId].content].name,\n            teamColor: teamData[props.teams[teamId].content].color\n        }\n\n\n    }\n\n    callbackFunction = (childData) => {\n\n        this.props.teams[this.state.teamId].content = parseInt(childData.value)\n\n\n        const newState2 = {\n            ...this.state,\n            teamName: teamData[parseInt(childData.value)].name,\n            teamColor: teamData[parseInt(childData.value)].color\n        }\n\n        this.setState(newState2)\n        console.log(this.props.teams)\n\n        console.log(this.state.teamId)\n    }\n\n\n\n    render() {\n\n        return (\n            <Draggable draggableId={this.props.id} index={this.props.index}>\n                {(provided, snapshot) => (\n                    \n                    <StyledCard\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        innerRef={provided.innerRef}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}>\n                        <Card.Header><TeamModal teamName={this.state.teamName} teamId={this.props.value} \n                        index={this.props.index}\n                        parentCallback={this.callbackFunction}\n                        >{this.state.teamName}</TeamModal></Card.Header>\n                        <ColoredCardBody teamColor={this.state.teamColor}>\n                            <Card.Text> Pick #:{(32 * this.props.round) + this.props.index + 1} </Card.Text>\n                        </ColoredCardBody>\n                    </StyledCard>\n                )\n                }\n            </Draggable>\n        )\n    }\n\n}","import React from 'react';\n//import Card from 'react-bootstrap/Card';\nimport styled from 'styled-components';\nimport TeamCard from './teamCard';\nimport { Droppable } from 'react-beautiful-dnd';\n\n\nconst Container = styled.div`\n    \n    border: 1px solid lightgrey;\n    width: 50%;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n \n`;\n\nconst Title = styled.div`\n\n    width: auto;\n    font-weight: bold;\n`;\n\nconst DraftList = styled.div`\n    border: black;\n    padding: 2px;\n    margin: 1%;\n    overflow-y: scroll;\n    height: 450px;\n    transition: background-color 0.2s ease;\n    background-color: ${props => (props.isDraggingOver ? 'lightgray' : 'white')};\n`;\n\n\n\nexport default class TeamColumn extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: 'team-column',\n            title: 'Teams',\n            teamIds: this.props.teamIds\n\n        }\n\n    }\n\n    render() {\n\n        return (\n\n            <Container>\n\n                <Title>{this.props.column.title}</Title>\n\n                <Droppable droppableId={this.props.column.id}>\n                    {(provided, snapshot) => (\n                        <DraftList\n                            innerRef = {provided.innerRef}\n                            ref={provided.innerRef}\n                            {...provided.droppableProps}\n                            isDraggingOver = {snapshot.isDraggingOver}\n                        >\n                            {this.props.teamIds.map((value, index) => (\n                                \n                                <TeamCard key={value} id={value} value={value} index={index} teams={this.props.teams} round={this.props.round}/>\n                            ))}\n                            {provided.placeholder}\n                        </DraftList>\n\n                    )\n                    }\n\n                </Droppable>\n            </Container>\n        )\n\n    }\n\n\n}","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport styled from 'styled-components';\nimport { Draggable } from \"react-beautiful-dnd\";\nimport './teamCard.css';\n\n\nconst StyledCard = styled(Card) `\n    \n\n    color: white;\n    background-color: #92a8d1;\n\tfont-size: 1em;\n\t\n    height: 70px;\n\n\tborder: 2px solid palevioletred;\n\tborder-radius: 3px;\n    margin-bottom: 7%;\n`;\n\nconst StyledCardHeader = styled(Card.Header) `\n    color: black;\n\n`;\n\nconst StyledCardBody = styled.div`\n\n    background-color: ${props => props.color}\n`;\n\n\nexport default class PlayerCard extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            id: props.id,\n            playerId:  props.playerId,\n            playerName:  props.players[props.id]['content'],\n            pos: props.players[props.id]['pos']\n  \n        }\n\n    }\n\n    render() {\n        \n        return (\n\n            <Draggable draggableId={this.props.id} index={this.props.index}>\n                {(provided, snapshot) => (\n                    <StyledCard\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        innerRef={provided.innerRef}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}>\n                        <StyledCardHeader>{this.state.playerName}</StyledCardHeader>\n                        <StyledCardBody color={this.props.color}>\n                         <Card.Text>{this.state.pos}</Card.Text>\n                        </StyledCardBody>\n                    </StyledCard>\n                )\n                }\n            </Draggable>\n\n\n        )\n\n\n    }\n\n}","import React from 'react';\nimport styled from 'styled-components';\nimport PlayerCard from './playerCard';\nimport teamData from './team-data'\nimport { Droppable } from 'react-beautiful-dnd';\n\n\nconst Container = styled.div`\n    \n    border: 1px solid lightgrey;\n    width: 25%;\n    \n    text-align: center;\n    \n`;\n\nconst Title = styled.div`\n\n    width: auto;\n    font-weight: bold;\n`;\n\nconst PlayerList = styled.div`\n    border: black;\n    padding: 2px;\n    margin: 1%;\n    overflow-y: scroll;\n    height: 450px;\n    transition: background-color 0.2s ease;\n    background-color: ${props => (props.isDraggingOver ? !props.players.includes(props.draggingOverWith) ? 'lightcoral' : 'lightgreen' : 'white')};\n    flex-grow: 1;\n`;\n\n\nexport default class PlayerColumn extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: 'player-column',\n            title: 'Picked Players',\n            playerIds: this.props.playerIds\n\n        }\n    }\n    render() {\n\n\n        return (\n            <Container>\n                <Title>{this.props.column.title}</Title>\n                <Droppable droppableId={this.props.column.id}>\n                    {(provided, snapshot) => (\n                        <PlayerList\n                            innerRef={provided.innerRef}\n                            ref={provided.innerRef}\n                            {...provided.droppableProps}\n                            isDraggingOver={snapshot.isDraggingOver}\n                            draggingOverWith={snapshot.draggingOverWith}\n                            players={this.props.allPlayerIds} >\n                            {this.props.column.playerIds.map((value, index) => (\n                                //This is for setting the color of the draft pick to the corresponding team\n                                <PlayerCard key={value} id={value} playerId={value} players={this.props.players} index={index}\n                                color={teamData[this.props.teams[this.props.teamColumn.teamIds[index]].content].color} />\n\n                            ))}\n                            {provided.placeholder}\n                        </PlayerList>\n                    )\n                    }\n                </Droppable>\n\n\n            </Container>\n\n        )\n\n    }\n}\n\n\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Droppable } from 'react-beautiful-dnd';\nimport PlayerCard from './playerCard';\n\nconst Container = styled.div`\n    \n    border: 1px solid lightgrey;\n    width: 25%;\n    \n    text-align: center;\n    \n`;\n\nconst Title = styled.div`\n\n    width: auto;\n    font-weight: bold;\n`;\n\nconst SearchBar = styled.input`\n    border-radius: 5px;\n    margin-bottom: 3%;\n\n`;\n\nconst PlayerList = styled.div`\n    border: black;\n    padding: 2px;\n    margin: 1%;\n    overflow-y: scroll;\n    height: 420px;\n    transition: background-color 0.2s ease;\n    background-color: ${props => (props.isDraggingOver ? !props.players.includes(props.draggingOverWith) ? 'lightcoral' : 'lightgreen' : 'white')};\n    flex-grow: 1;\n`;\n\nexport default class PlayerPool extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: 'player-pool',\n            title: 'Unselected Players',\n            playerIds: this.props.playerIds,\n            search: \"\"\n        }\n    }\n\n    updateSearch(event){\n        this.setState({\n            ...this.state,\n            search: event.target.value\n        })\n    }\n\n    render() {\n        \n        let filteredPlayerIds = this.props.column.playerIds.filter(\n\n            player => {\n                return this.props.players[player].content.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1\n            }\n\n        )\n        return (\n            <Container>\n                <Title>{this.props.column.title}</Title>\n                <SearchBar type='search' placeholder=\"Search..\" value={this.state.search} onChange={this.updateSearch.bind(this)}/>\n                <Droppable droppableId={this.props.column.id}>\n                    {(provided, snapshot) => (\n                        <PlayerList\n                            innerRef={provided.innerRef}\n                            ref={provided.innerRef}\n                            {...provided.droppableProps}\n                            isDraggingOver={snapshot.isDraggingOver}\n                            draggingOverWith={snapshot.draggingOverWith}\n                            players={this.props.allPlayerIds}>\n                            \n                            {filteredPlayerIds.map((value, index) => (\n\n                                <PlayerCard key={value} id={value} playerId={value} players={this.props.players} index={index} \n                                    color=\"DimGrey\"\n                                />\n\n                            ))}\n                            {provided.placeholder}\n                        </PlayerList>\n                    )\n                    }\n                </Droppable>\n            </Container>\n\n        )\n\n    }\n\n}","import playerFile2 from './morePlayers.json'\n\n\nvar request = new XMLHttpRequest();\nrequest.open(\"GET\", \"./data/players.json\", false);\nrequest.send(null)\n\nconst initialData = {\n\n    'teams': {\n        'team-1': { id: 'team-1', content: 1 }\n    },\n\n    'players': playerFile2['players'],\n\n\n    /*{\n\n        'Joe-Burrow': { id: 'Joe-Burrow', content: 'Joe Burrow', pos: 'Quarterback', school: 'LSU' },\n        'Chase-Young': { id: 'Chase-Young', content: 'Chase Young', pos: 'Edge', school: 'OSU' },\n        'Tua-T': { id: 'Tua-T', content: 'Tua T', pos: 'Quarterback', school: 'Alabama' }\n\n    }, */\n\n    //'allPlayerIds': ['Joe-Burrow', 'Chase-Young', 'Tua-T', 'Jeffrey-Okudah', 'Derrick-Brown', 'Andrew-Thomas', 'Isaiah-Simmons'],\n\n    allPlayerIds: playerFile2['ids'],\n\n    columns: {\n        'team-column': {\n            id: 'team-column',\n            title: 'Teams',\n            teamIds: null\n        },\n\n        'player-column': {\n            id: 'player-column',\n            title: 'Picked Players',\n            playerIds: []\n        },\n\n        'player-pool': {\n            id: 'player-pool',\n            title: 'Player Pool',\n            playerIds: ['Joe-Burrow', 'Chase-Young', 'Tua-T']\n        }\n    },\n\n    columnOrder: ['team-column', 'player-column', 'player-pool'],\n\n    draftOrder: [   \n        [6, 31, 10, 22, 18, 16, 4, 0, 14, 7, 23, 24, 13, 29, 9, 1, 8,\n        18, 24, 14, 25, 3, 20, 21, 19, 18, 28, 2, 30, 11, 27, 15],\n\n        [6, 13, 10, 22, 16, 4, 18, 0, 7, 14, 5, 13, 29, 9, 1, 23, 26, 5, 8, 17, \n        25, 3, 1, 18, 12, 19, 28, 2, 30, 11, 15, 28],\n\n        [6, 31, 10, 23, 4, 18, 16, 0, 14, 7, 13, 29, 9, 1, 23, 24, 24, 8, 9, 17, 25, 3,\n        20, 21, 19, 7, 24, 2, 30, 11, 9, 15]\n\n    ]\n\n}\n\nexport default initialData;","import React from 'react';\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport './css/Mock.css';\nimport TeamColumn from './TeamColumn';\nimport PlayerColumn from './PlayerColumn';\nimport PlayerPool from './PlayerPool';\nimport initialData from './initial-data.js';\nimport styled from 'styled-components';\n\n\nconst DraftTable = styled.div`\n    display: flex;\n    width: 80%;\n    margin: auto;\n    overflow-y: scroll;\n    border-style: solid;\n    border-radius: 10px;\n    margin-bottom: 2%;\n`;\n\n\n\nexport default class Mock extends React.Component {\n\n    state = initialData;\n\n\n    refreshTable = () => {\n\n        this.setState(this.state)\n\n    }\n\n    constructor(props) {\n\n        super(props)\n        this.state = props.mockPage\n\n    }\n\n    onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n            return;\n        }\n\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n\n        if (source.droppableId === \"team-column\" && destination.droppableId !== \"team-column\" ||\n            source.droppableId !== \"team-column\" && destination.droppableId === \"team-column\") {\n            return;\n        }\n\n        if (source.droppableId === \"team-column\" && destination.droppableId === \"team-column\") {\n            //For the team order\n            const column = this.props.mockPage.columns[source.droppableId];\n            const newTeamIds = Array.from(column.teamIds)\n\n            newTeamIds.splice(source.index, 1)\n            newTeamIds.splice(destination.index, 0, draggableId)\n\n            const newColumn = {\n                ...column,\n                teamIds: newTeamIds,\n            };\n\n            const newState = {\n                ...this.props.mockPage,\n                columns: {\n                    ...this.props.mockPage.columns,\n                    [newColumn.id]: newColumn\n                }\n            };\n\n\n            \n            this.props.changeMockCallback(newState, this.props.mockIndex)\n\n            \n        } else {\n            //For the players\n            const startColumn = this.props.mockPage.columns[source.droppableId];\n            const finishColumn = this.props.mockPage.columns[destination.droppableId];\n\n\n            if (startColumn === finishColumn) { //If in the same column\n                const column = startColumn;\n                const newPlayerIds = Array.from(column.playerIds)\n\n                newPlayerIds.splice(source.index, 1)\n                newPlayerIds.splice(destination.index, 0, draggableId)\n\n                const newColumn = {\n                    ...column,\n                    playerIds: newPlayerIds,\n                };\n\n                const newState = {\n                    ...this.props.mockPage,\n                    columns: {\n                        ...this.props.mockPage.columns,\n                        [newColumn.id]: newColumn\n                    },\n                };\n\n\n                this.props.changeMockCallback(newState, this.props.mockIndex)\n\n\n            } else {\n                // if to different column\n\n                if (finishColumn.id === 'player-column' && finishColumn.playerIds.length >= this.props.mockPage.columns[\"team-column\"].teamIds.length) {\n\n                    return\n                }\n\n                const startPlayerIds = Array.from(startColumn.playerIds)\n                startPlayerIds.splice(source.index, 1)\n                const finishPlayerIds = Array.from(finishColumn.playerIds)\n                finishPlayerIds.splice(destination.index, 0, draggableId)\n\n                const newStartColumn = {\n                    ...startColumn,\n                    playerIds: startPlayerIds,\n                };\n\n                const newFinishColumn = {\n                    ...finishColumn,\n                    playerIds: finishPlayerIds\n                };\n\n                const newAltState = {\n                    ...this.props.mockPage,\n                    columns: {\n                        ...this.props.mockPage.columns,\n                        [newStartColumn.id]: newStartColumn,\n                        [newFinishColumn.id]: newFinishColumn\n                    },\n\n                };\n\n                this.props.changeMockCallback(newAltState, this.props.mockIndex);\n\n            }\n        }\n\n\n    }\n\n\n\n    render() {\n\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <DraftTable>\n                    {this.props.mockPage.columnOrder.map(columnId => {\n\n                        const teamColumn = this.props.mockPage.columns[columnId];\n\n                        if (columnId === 'team-column') {\n                            \n                            const actualTeams = teamColumn.teamIds;\n\n                            return <TeamColumn key={teamColumn.id} title=\"Teams\" teamIds={actualTeams} column={teamColumn} teams={this.props.teamSetup} round={this.props.mockIndex}/>\n                        }\n\n                        if (columnId === 'player-column') {\n\n                            const players = this.props.mockPage.players;\n                            const pickedPlayers = teamColumn.playerIds;\n\n                            return <PlayerColumn key={teamColumn.id} playerIds={pickedPlayers} column={teamColumn}\n                                players={players} allPlayerIds={this.props.mockPage.allPlayerIds} teamColumn={this.props.mockPage.columns['team-column']}\n                                teams={this.props.mockPage.teams} />\n                        }\n\n                        if (columnId === 'player-pool') {\n                            const players = this.props.mockPage.players;\n                            const unpickedPlayers = teamColumn.playerIds;\n                            return <PlayerPool key={teamColumn.id} playerIds={unpickedPlayers} column={teamColumn} players={players} allPlayerIds={this.props.mockPage.allPlayerIds} />\n                        }\n\n                    })\n                    }\n                </DraftTable>\n\n            </DragDropContext>\n\n        );\n    }\n}\n","import React, { useState } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport DraftCompiler from './DraftCompiler'\n\n\n\nfunction draftText(teams) {\n\n    return DraftCompiler(teams)\n\n}\n\nfunction setupOrder(props) {\n\n    let allInfo = props.allData;\n\n    let totalIds = []\n    let totalTeams = {}\n    let totalPickedPlayers = []\n    let totalPlayers = {}\n    //Collect all chosen teams based on the number of pages\n    var i;\n    for (i = 0; i < allInfo.totalRounds; i++) {\n\n        totalIds = totalIds.concat(allInfo.mocks[i].columns['team-column'].teamIds)\n\n        totalTeams = Object.assign(totalTeams, allInfo.mocks[i].teams)\n        totalPickedPlayers = totalPickedPlayers.concat(allInfo.mocks[i].columns['player-column'].playerIds)\n        totalPlayers = Object.assign(totalPlayers, allInfo.mocks[i].players)\n    }\n\n\n    let allRoundInfo = {\n        ids: totalIds,\n        teams: totalTeams,\n        pickedPlayers: totalPickedPlayers,\n        players: totalPlayers\n    }\n\n    return draftText(allRoundInfo)\n}\n\n\nexport default function ShareModal(props) {\n\n    var draftOutput = setupOrder(props)\n\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => {\n\n        setShow(true);\n\n    }\n\n    return (\n        <>\n        <Button onClick={handleShow} variant=\"danger\">Share</Button>\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton><Modal.Title>Shareable List:</Modal.Title></Modal.Header>\n            <Modal.Body>\n                <Form.Control as=\"textarea\" rows=\"18\" defaultValue={draftOutput}>\n\n                </Form.Control>\n            </Modal.Body>\n        </Modal>\n        </>\n    );\n\n}","import teamData from './team-data';\n\nexport default function DraftCompiler(draftInfo) {\n\n    var text = \"\"\n\n    if (draftInfo.ids != null) {\n        var redditFormat = \"-------REDDIT FORMAT-------------\\n\\n\"\n\n        var excelFormat = \"-------------EXCEL FORMAT-------------\\n\\n\"\n        var columns = \"Number, Team, Name, Position, School\\n\"\n        excelFormat += columns;\n\n        draftInfo.ids.map( (value, index) => {\n\n            let newLine = teamData[draftInfo.teams[value].content].name     //Player name\n\n            let playerId = draftInfo.pickedPlayers[index]       //Player id\n            var chosenPick = \"--Not Selected--\"\n            var position = \"\"\n            var school = \"\"\n            if (playerId != null) {\n                chosenPick = draftInfo.players[playerId].content        //name set\n                position = draftInfo.players[playerId].pos              //position set\n                school = draftInfo.players[playerId].school             // school set\n            }\n\n            redditFormat +=  \"**\" + (index+1) + \"**.\\t**\" + newLine + \"** - **\" + chosenPick + \"**, *\" + position + \"-\" + school + \"*\\n\\n\";\n\n            excelFormat +=  (index+1) + \",\" + newLine + \",\" + chosenPick + \",\" + position + \",\" + school + \"\\n\";\n\n        })\n\n        text += redditFormat;\n        text += excelFormat;\n\n        return text;\n\n    }\n\n\n}","import React from 'react';\nimport './css/App.css';\nimport Mock from './Mock';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ShareModal from './ShareModal';\nimport Button from 'react-bootstrap/Button';\nimport logo from './images/yellow_brown_logo.png';\nimport initialData from './initial-data.js';\nimport playerFile2 from './testPlayers.json'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n        integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n        crossorigin=\"anonymous\"\n      />\n\n      <Top />\n      <footer color=\"lightgrey\">developed by Avery Higgins, 2020</footer>\n\n    </div>\n  );\n}\n\n\nclass Top extends React.Component {\n\n  maxRounds = 3;\n  maxMockPages = false;\n\n  prevArrow= false\n  nextArrow= false\n\n  state = {\n    mocks: {},\n    currentMock: 0,\n    totalRounds: 1,\n    message: {\n      ids: [],\n      teams: [],\n      pickedPlayers: [],\n      players: []\n    },\n    currentMockObj: null,\n    globalPlayerPool: {}\n  }\n\n  changeMockPageData = (newState, index) => {\n\n    this.setState({\n      ...this.state,\n      globalPlayerPool: newState.columns['player-pool'].playerIds,\n      message: {\n        ids: newState.columns['team-column'].teamIds,\n        teams: newState.teams,\n        pickedPlayers: newState.columns['player-column'].playerIds,\n        players: newState.players\n      },\n      mocks: {\n        ...this.state.mocks,\n        [index]: newState\n      }\n\n    })\n  }\n\n\n  addMockPage() {\n\n    let index = this.state.totalRounds\n    this.setState({ ...this.state, totalRounds: this.state.totalRounds++ })\n    let filledTeamIds2 = [];\n    let defaultOrder2 = {};\n    var counter = 32 * index;\n\n    initialData.draftOrder[index].map(function (value) {\n\n      defaultOrder2['team-' + counter] = (\n        {\n          id: 'team-' + counter,\n          content: value\n        }\n      )\n\n      filledTeamIds2.push('team-' + counter)\n      counter++;\n    }\n    )\n\n    //Creates first draft board\n    this.state.mocks[index] =\n      {\n        'teams': defaultOrder2,\n        'players': initialData.players,\n        allPlayerIds: playerFile2['ids'],\n\n        columns: {\n          'team-column': {\n            id: 'team-column',\n            title: 'Teams',\n            teamIds: filledTeamIds2\n          },\n\n          'player-column': {\n            id: 'player-column',\n            title: 'Picked Players',\n            playerIds: []\n          },\n\n          'player-pool': {\n            id: 'player-pool',\n            title: 'Player Pool',\n            playerIds: this.state.globalPlayerPool\n          }\n        },\n\n        columnOrder: ['team-column', 'player-column', 'player-pool']\n\n      }\n\n\n\n\n  }\n\n\n  constructor() {\n    super()\n    this.state.mocks[0] = initialData\n\n    let defaultOrder = {};\n    let filledTeamIds = []\n\n    var counter = 0;\n    this.state.globalPlayerPool = initialData.allPlayerIds\n\n    initialData.draftOrder[0].map(function (value) {\n\n      defaultOrder['team-' + counter] = (\n        {\n          id: 'team-' + counter,\n          content: value\n        }\n      )\n\n      filledTeamIds.push('team-' + counter)\n      counter++;\n    }\n    )\n\n    this.state.mocks[0] = {\n      ...this.state.mocks[0],\n      teams: defaultOrder,\n      columns: {\n        ...this.state.mocks[0].columns,\n        'team-column': {\n          ...this.state.mocks[0].columns['team-column'],\n          teamIds: filledTeamIds\n        },\n        'player-pool': {\n          ...this.state.mocks[0].columns['player-pool'],\n          playerIds: this.state.globalPlayerPool\n        }\n      }\n    }\n\n\n  }\n\n\n  render() {\n\n    this.prevArrow = this.state.currentMock > 0;\n    this.nextArrow = this.state.currentMock < this.state.totalRounds - 1;\n    this.maxMockPages = this.state.totalRounds >= 3;\n\n    return (\n\n      <Container>\n\n        <div className=\"Header\">\n\n          <h1 className=\"logo\">\n            <img src={logo} alt=\"Logo\" />Mocker\n          </h1>\n\n          <ToggleButtonGroup type=\"radio\" name=\"pages\" size=\"lg\" defaultValue=\"Create\" className=\"btnGrp\" >\n            <ToggleButton variant=\"danger\" value=\"About\" disabled=\"true\">About</ToggleButton>\n\n            <ShareModal teamInfo={this.state.message} allData={this.state}><ToggleButton variant=\"danger\" value=\"Share\" active>Share</ToggleButton> </ShareModal>\n\n            <ToggleButton variant=\"danger\" value=\"Create\" active>Create</ToggleButton>\n            <ToggleButton variant=\"danger\" value=\"Load\" disabled=\"true\">Load</ToggleButton>\n            <ToggleButton variant=\"danger\" value=\"More\" disabled=\"true\">More</ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n\n        <Mock changeMockCallback={this.changeMockPageData} mockPage={this.state.mocks[this.state.currentMock]} mockIndex={this.state.currentMock}\n          teamSetup={this.state.mocks[this.state.currentMock].teams} />\n\n        <b>Round {this.state.currentMock + 1}</b><br />\n\n        <Button disabled={!this.prevArrow} onClick={() => {\n\n          this.state.currentMock--\n          this.setState({\n            ...this.state,\n            mocks: {\n              ...this.state.mocks,\n              [this.state.currentMock]: {\n                ...this.state.mocks[this.state.currentMock],\n                columns: {\n                  ...this.state.mocks[this.state.currentMock].columns,\n                  'player-pool': {\n                    ...this.state.mocks[this.state.currentMock].columns['player-pool'],\n                    playerIds: this.state.globalPlayerPool\n                  }\n                }\n              }\n            }\n          })\n\n\n        }}>&#8249;</Button>\n\n        <Button onClick={() => {\n          this.addMockPage()\n          this.state.currentMock++\n          this.setState(this.state)\n\n        }} disabled={this.maxMockPages}>+</Button>\n\n        <Button disabled={!this.nextArrow} onClick={() => {\n          this.state.currentMock++\n          this.setState({\n            ...this.state,\n            mocks: {\n              ...this.state.mocks,\n              [this.state.currentMock]: {\n                ...this.state.mocks[this.state.currentMock],\n                columns: {\n                  ...this.state.mocks[this.state.currentMock].columns,\n                  'player-pool': {\n                    ...this.state.mocks[this.state.currentMock].columns['player-pool'],\n                    playerIds: this.state.globalPlayerPool\n                  }\n                }\n              }\n            }\n          })\n        }} >&#8250;</Button>\n      </Container>\n\n\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport {\n    BrowserView,\n    MobileView\n  } from \"react-device-detect\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<><BrowserView><App /> </BrowserView> <MobileView>Sorry, there is currently no mobile support for this app ☹️</MobileView></>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/yellow_brown_logo.58018991.png\";"],"sourceRoot":""}