{"ast":null,"code":"var _jsxFileName = \"/Users/averyhiggins/Desktop/CS347/mock-app/src/Mock.js\";\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Table from 'react-bootstrap/Table';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Mock.css';\nimport teamData from './team-data';\nimport TeamColumn from './TeamColumn';\nimport PlayerColumn from './PlayerColumn';\nimport PlayerPool from './PlayerPool';\nimport initialData from './initial-data.js';\nimport styled from 'styled-components';\nconst DraftTable = styled.div`\n    display: flex;\n    width: 80%;\n    margin: auto;\n    overflow-y: scroll;\n`;\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nconst getItemStyle = (isDragging, DraggableStyle) => ({\n  userSelect: \"none\",\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n  ...DraggableStyle\n});\n\nconst grid = 8;\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 700\n});\n\nclass GenerateList extends React.Component {\n  render() {\n    return React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Monkey\");\n  }\n\n}\n\nexport default class Mock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = initialData;\n\n    this.sendData = () => {\n      console.log(this.state.columns['player-column'].playerIds);\n      console.log(this.state.columns['player-pool'].playerIds);\n      this.props.parentCallback({\n        ids: this.state.columns['team-column'].teamIds,\n        teams: this.state.teams,\n        pickedPlayers: this.state.columns['player-column'].playerIds,\n        players: this.state.players\n      });\n    };\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      if (source.droppableId === \"team-column\" && destination.droppableId != \"team-column\" || source.droppableId != \"team-column\" && destination.droppableId === \"team-column\") {\n        return;\n      }\n\n      if (source.droppableId === \"team-column\" && destination.droppableId === \"team-column\") {\n        //For the team order\n        const column = this.state.columns[source.droppableId];\n        const newTeamIds = Array.from(column.teamIds);\n        newTeamIds.splice(source.index, 1);\n        newTeamIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...column,\n          teamIds: newTeamIds\n        };\n        const newTeams = {\n          'team-1': {\n            id: 'team-1',\n            content: 1\n          }\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        this.sendData(); //console.log(this.state.teams)\n      } else {\n        //For the players\n        const startColumn = this.state.columns[source.droppableId];\n        const finishColumn = this.state.columns[destination.droppableId];\n\n        if (startColumn === finishColumn) {\n          //If in the same column\n          const column = startColumn;\n          const newPlayerIds = Array.from(column.playerIds);\n          newPlayerIds.splice(source.index, 1);\n          newPlayerIds.splice(destination.index, 0, draggableId);\n          const newColumn = { ...column,\n            playerIds: newPlayerIds\n          };\n          const newState = { ...this.state,\n            columns: { ...this.state.columns,\n              [newColumn.id]: newColumn\n            }\n          };\n          this.setState(newState);\n          this.sendData();\n        } else {\n          // if to different column\n          const startPlayerIds = Array.from(startColumn.playerIds);\n          startPlayerIds.splice(source.index, 1);\n          const newStartColumn = { ...startColumn,\n            playerIds: startPlayerIds\n          };\n          const finishPlayerIds = Array.from(finishColumn.playerIds);\n          finishPlayerIds.splice(destination.index, 0, draggableId);\n          const newFinishColumn = { ...finishColumn,\n            playerIds: finishPlayerIds\n          };\n          const newState = { ...this.state,\n            columns: { ...this.state.columns,\n              [newStartColumn.id]: newStartColumn,\n              [newFinishColumn.id]: newFinishColumn\n            }\n          };\n          this.setState(newState);\n          this.sendData();\n          this.sendData();\n        }\n      }\n    };\n\n    let defaultOrder = {};\n    let filledTeamIds = [];\n\n    for (var i = 0; i < 32; i++) {\n      defaultOrder['team-' + i] = {\n        id: 'team-' + i,\n        content: i\n      };\n      filledTeamIds.push('team-' + i);\n    }\n\n    this.state = { ...this.state,\n      teams: defaultOrder,\n      columns: { ...this.state.columns,\n        ['team-column']: { ...this.state.columns['team-column'],\n          teamIds: filledTeamIds\n        }\n      }\n    };\n    this.sendData();\n  }\n\n  render() {\n    return React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(DraftTable, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, this.state.columnOrder.map(columnId => {\n      //alert(columnId)\n      const teamColumn = this.state.columns[columnId]; //alert(teamColumn.id)\n\n      if (columnId === 'team-column') {\n        const teams = this.state.teams;\n        const actualTeams = teamColumn.teamIds; //const teamIds = teams.map(teamId => this.state.teams)\n        //teamColumn.teamIds = Array(teams);\n\n        return React.createElement(TeamColumn, {\n          key: teamColumn.id,\n          title: \"Teams\",\n          teamIds: actualTeams,\n          column: teamColumn,\n          teams: teams,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        });\n      }\n\n      if (columnId === 'player-column') {\n        const players = this.state.players;\n        const pickedPlayers = teamColumn.playerIds;\n        return React.createElement(PlayerColumn, {\n          key: teamColumn.id,\n          playerIds: pickedPlayers,\n          column: teamColumn,\n          players: players,\n          allPlayerIds: this.state.allPlayerIds,\n          teamColumn: this.state.columns['team-column'],\n          teams: this.state.teams,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        });\n      }\n\n      if (columnId === 'player-pool') {\n        const players = this.state.players;\n        const unpickedPlayers = teamColumn.playerIds;\n        return React.createElement(PlayerPool, {\n          key: teamColumn.id,\n          playerIds: unpickedPlayers,\n          column: teamColumn,\n          players: players,\n          allPlayerIds: this.state.allPlayerIds,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          },\n          __self: this\n        });\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/averyhiggins/Desktop/CS347/mock-app/src/Mock.js"],"names":["React","Card","Container","Table","DragDropContext","Droppable","Draggable","teamData","TeamColumn","PlayerColumn","PlayerPool","initialData","styled","DraftTable","div","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","getItemStyle","isDragging","DraggableStyle","userSelect","background","grid","getListStyle","isDraggingOver","padding","width","GenerateList","Component","render","Mock","constructor","props","state","sendData","console","log","columns","playerIds","parentCallback","ids","teamIds","teams","pickedPlayers","players","onDragEnd","destination","source","draggableId","droppableId","index","column","newTeamIds","newColumn","newTeams","id","content","newState","setState","startColumn","finishColumn","newPlayerIds","startPlayerIds","newStartColumn","finishPlayerIds","newFinishColumn","defaultOrder","filledTeamIds","i","push","columnOrder","map","columnId","teamColumn","actualTeams","allPlayerIds","unpickedPlayers"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Table from 'react-bootstrap/Table'\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Mock.css';\nimport teamData from './team-data';\nimport TeamColumn from './TeamColumn';\nimport PlayerColumn from './PlayerColumn';\nimport PlayerPool from './PlayerPool';\nimport initialData from './initial-data.js';\nimport styled from 'styled-components';\n\n\nconst DraftTable = styled.div`\n    display: flex;\n    width: 80%;\n    margin: auto;\n    overflow-y: scroll;\n`;\n\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nconst getItemStyle = (isDragging, DraggableStyle) => ({\n    userSelect: \"none\",\n\n    // change background colour if dragging\n    background: isDragging ? \"lightgreen\" : \"grey\",\n\n    ...DraggableStyle\n\n});\n\nconst grid = 8;\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n    padding: grid,\n    width: 700\n\n});\n\n\nclass GenerateList extends React.Component {\n\n    render() {\n        return <b>Monkey</b>\n    }\n\n}\n\n\n\nexport default class Mock extends React.Component {\n\n    state = initialData;\n\n    sendData = () => {\n        console.log(this.state.columns['player-column'].playerIds)\n        console.log(this.state.columns['player-pool'].playerIds)\n        this.props.parentCallback({\n            ids: this.state.columns['team-column'].teamIds,\n            teams: this.state.teams,\n            pickedPlayers: this.state.columns['player-column'].playerIds,\n            players: this.state.players\n        });\n\n    }\n\n    constructor(props) {\n        super(props)\n\n        let defaultOrder = {};\n        let filledTeamIds = []\n\n        for (var i = 0; i < 32; i++) {\n            defaultOrder['team-' + i] = (\n                {\n                    id: 'team-' + i,\n                    content: i\n                }\n            )\n            filledTeamIds.push('team-' + i)\n        }\n\n\n        this.state = {\n            ...this.state,\n            teams: defaultOrder,\n            columns: {\n                ...this.state.columns,\n                ['team-column']: {\n                    ...this.state.columns['team-column'],\n                    teamIds: filledTeamIds\n                }\n            }\n        }\n\n        this.sendData()\n\n\n    }\n\n    onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n            return;\n        }\n\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n\n        if (source.droppableId === \"team-column\" && destination.droppableId != \"team-column\" ||\n            source.droppableId != \"team-column\" && destination.droppableId === \"team-column\") {\n            return;\n        }\n\n        if (source.droppableId === \"team-column\" && destination.droppableId === \"team-column\") {\n            //For the team order\n            const column = this.state.columns[source.droppableId];\n            const newTeamIds = Array.from(column.teamIds)\n\n            newTeamIds.splice(source.index, 1)\n            newTeamIds.splice(destination.index, 0, draggableId)\n\n            const newColumn = {\n                ...column,\n                teamIds: newTeamIds,\n            };\n\n            const newTeams = {\n                'team-1': { id: 'team-1', content: 1 }\n            }\n\n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newColumn.id]: newColumn\n                }\n            };\n\n            \n\n            this.setState(newState)\n            this.sendData()\n            //console.log(this.state.teams)\n        } else {\n            //For the players\n            const startColumn = this.state.columns[source.droppableId];\n            const finishColumn = this.state.columns[destination.droppableId];\n\n\n            if (startColumn === finishColumn) { //If in the same column\n                const column = startColumn;\n                const newPlayerIds = Array.from(column.playerIds)\n\n                newPlayerIds.splice(source.index, 1)\n                newPlayerIds.splice(destination.index, 0, draggableId)\n\n                const newColumn = {\n                    ...column,\n                    playerIds: newPlayerIds,\n                };\n\n                const newState = {\n                    ...this.state,\n                    columns: {\n                        ...this.state.columns,\n                        [newColumn.id]: newColumn\n                    },\n                };\n                this.setState(newState)\n                this.sendData()\n                \n\n            } else {\n                // if to different column\n                const startPlayerIds = Array.from(startColumn.playerIds)\n                startPlayerIds.splice(source.index, 1)\n\n                const newStartColumn = {\n                    ...startColumn,\n                    playerIds: startPlayerIds\n                };\n\n                const finishPlayerIds = Array.from(finishColumn.playerIds)\n                finishPlayerIds.splice(destination.index, 0, draggableId)\n\n                const newFinishColumn = {\n                    ...finishColumn,\n                    playerIds: finishPlayerIds\n                };\n\n                const newState = {\n                    ...this.state,\n                    columns: {\n                        ...this.state.columns,\n                        [newStartColumn.id]: newStartColumn,\n                        [newFinishColumn.id]: newFinishColumn\n                    }\n\n                }\n                this.setState(newState)\n                this.sendData()\n                this.sendData()\n            }\n        }\n\n        \n\n    }\n    render() {\n\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <DraftTable>\n                    {this.state.columnOrder.map(columnId => {\n                        //alert(columnId)\n                        const teamColumn = this.state.columns[columnId];\n\n                        //alert(teamColumn.id)\n                        if (columnId === 'team-column') {\n                            const teams = this.state.teams;\n                            const actualTeams = teamColumn.teamIds;\n                            //const teamIds = teams.map(teamId => this.state.teams)\n                            //teamColumn.teamIds = Array(teams);\n\n                            return <TeamColumn key={teamColumn.id} title=\"Teams\" teamIds={actualTeams} column={teamColumn} teams={teams} />\n                        }\n\n                        if (columnId === 'player-column') {\n                            const players = this.state.players;\n                            const pickedPlayers = teamColumn.playerIds;\n\n                            return <PlayerColumn key={teamColumn.id} playerIds={pickedPlayers} column={teamColumn} \n                            players={players} allPlayerIds={this.state.allPlayerIds} teamColumn={this.state.columns['team-column']}\n                            teams={this.state.teams} />\n                        }\n\n                        if (columnId === 'player-pool') {\n                            const players = this.state.players;\n                            const unpickedPlayers = teamColumn.playerIds;\n                            return <PlayerPool key={teamColumn.id} playerIds={unpickedPlayers} column={teamColumn} players={players} allPlayerIds={this.state.allPlayerIds}/>\n                        }\n\n                    })\n                    }\n                </DraftTable>\n\n            </DragDropContext>\n\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}