{"ast":null,"code":"var _jsxFileName = \"/Users/averyhiggins/Desktop/CS347/mock-app/src/Mock.js\";\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Table from 'react-bootstrap/Table';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Mock.css';\nimport teamData from './team-data';\nimport TeamColumn from './TeamColumn';\nimport initialData from './initial-data.js';\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nconst getItemStyle = (isDragging, DraggableStyle) => ({\n  userSelect: \"none\",\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n  ...DraggableStyle\n});\n\nconst grid = 8;\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 700\n});\n\nclass GenerateList extends React.Component {\n  render() {\n    return React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Monkey\");\n  }\n\n}\n\nexport default class Mock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = initialData;\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const column = this.state.columns[source.droppableId];\n      const newTeamIds = Array.from(column.teamIds);\n      newTeamIds.splice(source.index, 1);\n      newTeamIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column,\n        teamIds: newTeamIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      alert(this.state.columns.teamIds);\n      alert(newState.columns.teamIds);\n      this.setState(newState);\n    };\n\n    let defaultOrder = Array();\n\n    for (var i = 0; i < 32; i++) {\n      defaultOrder.push({\n        id: 'team-' + i,\n        content: i\n      });\n    }\n\n    this.state = { ...this.state,\n      teams: defaultOrder //columns : {\n      //     ...this.state.columns,\n      //     ['team-column']: defaultOrder\n      // }\n\n    };\n  }\n\n  render() {\n    return React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"draftTable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.columnOrder.map(columnId => {\n      //alert(columnId)\n      const teamColumn = this.state.columns[columnId]; //alert(teamColumn.id)\n\n      if (columnId === 'team-column') {\n        const teams = this.state.teams;\n        teamColumn.teamIds = teams;\n        return React.createElement(TeamColumn, {\n          key: teamColumn.id,\n          title: \"Teams\",\n          teamIds: teams,\n          column: teamColumn,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        });\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/averyhiggins/Desktop/CS347/mock-app/src/Mock.js"],"names":["React","Card","Container","Table","DragDropContext","Droppable","Draggable","teamData","TeamColumn","initialData","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","getItemStyle","isDragging","DraggableStyle","userSelect","background","grid","getListStyle","isDraggingOver","padding","width","GenerateList","Component","render","Mock","constructor","props","state","onDragEnd","destination","source","draggableId","droppableId","index","column","columns","newTeamIds","teamIds","newColumn","newState","id","alert","setState","defaultOrder","i","push","content","teams","columnOrder","map","columnId","teamColumn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Table from 'react-bootstrap/Table'\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Mock.css';\nimport teamData from './team-data';\nimport TeamColumn from './TeamColumn';\nimport initialData from './initial-data.js'\n\n\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nconst getItemStyle = (isDragging, DraggableStyle) => ({\n    userSelect: \"none\",\n\n    // change background colour if dragging\n    background: isDragging ? \"lightgreen\" : \"grey\",\n\n    ...DraggableStyle\n\n});\n\nconst grid = 8;\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n    padding: grid,\n    width: 700\n\n});\n\n\nclass GenerateList extends React.Component {\n\n    render() {\n        return <b>Monkey</b>\n    }\n\n}\n\n\n\nexport default class Mock extends React.Component {\n\n    state = initialData;\n\n    constructor(props) {\n        super(props)\n\n        let defaultOrder = Array();\n\n        for (var i = 0; i < 32; i++) {\n            defaultOrder.push(\n                {\n                    id: 'team-' + i,\n                    content: i\n                }\n            )\n\n        }\n        this.state = {\n            ...this.state,\n            teams: defaultOrder,\n            //columns : {\n           //     ...this.state.columns,\n           //     ['team-column']: defaultOrder\n           // }\n\n        }\n\n    }\n\n    onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n            return;\n        }\n\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n\n        const column = this.state.columns[source.droppableId];\n        const newTeamIds = Array.from(column.teamIds)\n        newTeamIds.splice(source.index, 1)\n        newTeamIds.splice(destination.index, 0, draggableId)\n\n        const newColumn = {\n            ...column,\n            teamIds: newTeamIds,\n        };\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newColumn.id]: newColumn,\n            },\n        };\n        alert(this.state.columns.teamIds)\n        alert(newState.columns.teamIds)\n        this.setState(newState)\n\n    }\n    render() {\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <div className=\"draftTable\">\n                    {this.state.columnOrder.map(columnId => {\n                        //alert(columnId)\n                        const teamColumn = this.state.columns[columnId];\n\n                        //alert(teamColumn.id)\n                        if (columnId === 'team-column') {\n                            const teams = this.state.teams;\n                            teamColumn.teamIds = teams;\n                            return <TeamColumn key={teamColumn.id} title=\"Teams\" teamIds={teams} column={teamColumn} />\n                        }\n                    })\n                    }\n                </div>\n            </DragDropContext>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}