{"ast":null,"code":"var _jsxFileName = \"/Users/averyhiggins/Desktop/CS347/mock-app/src/App.js\";\nimport React from 'react';\nimport './css/App.css';\nimport Mock from './Mock';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ShareModal from './ShareModal';\nimport LoadModal from './LoadModal';\nimport SaveModal from './SaveModal';\nimport Button from 'react-bootstrap/Button';\nimport logo from './images/yellow_brown_logo.png';\nimport initialData from './initial-data.js';\nimport playerFile2 from './testPlayers.json';\n\nfunction App() {\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\",\n    integrity: \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\",\n    crossorigin: \"anonymous\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), React.createElement(Top, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), React.createElement(\"footer\", {\n    color: \"lightgrey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"developed by Avery Higgins, 2020\"));\n}\n\nclass Top extends React.Component {\n  addMockPage() {\n    let index = this.state.totalRounds;\n    this.setState({ ...this.state,\n      totalRounds: this.state.totalRounds++\n    });\n    let filledTeamIds2 = [];\n    let defaultOrder2 = {};\n    var counter = 32 * index;\n    initialData.draftOrder[index].map(function (value) {\n      defaultOrder2['team-' + counter] = {\n        id: 'team-' + counter,\n        content: value\n      };\n      filledTeamIds2.push('team-' + counter);\n      counter++;\n    }); //Creates first draft board\n\n    this.state.mocks[index] = {\n      'teams': defaultOrder2,\n      'players': initialData.players,\n      allPlayerIds: playerFile2['ids'],\n      columns: {\n        'team-column': {\n          id: 'team-column',\n          title: 'Teams',\n          teamIds: filledTeamIds2\n        },\n        'player-column': {\n          id: 'player-column',\n          title: 'Picked Players',\n          playerIds: []\n        },\n        'player-pool': {\n          id: 'player-pool',\n          title: 'Player Pool',\n          playerIds: this.state.globalPlayerPool\n        }\n      },\n      columnOrder: ['team-column', 'player-column', 'player-pool']\n    };\n  }\n\n  constructor() {\n    super();\n    this.maxRounds = 3;\n    this.maxMockPages = false;\n    this.prevArrow = false;\n    this.nextArrow = false;\n    this.state = {\n      mocks: {},\n      currentMock: 0,\n      totalRounds: 1,\n      message: {\n        ids: [],\n        teams: [],\n        pickedPlayers: [],\n        players: []\n      },\n      currentMockObj: null,\n      globalPlayerPool: {}\n    };\n\n    this.changeMockPageData = (newState, index) => {\n      this.setState({ ...this.state,\n        globalPlayerPool: newState.columns['player-pool'].playerIds,\n        message: {\n          ids: newState.columns['team-column'].teamIds,\n          teams: newState.teams,\n          pickedPlayers: newState.columns['player-column'].playerIds,\n          players: newState.players\n        },\n        mocks: { ...this.state.mocks,\n          [index]: newState\n        }\n      });\n    };\n\n    this.loadMock = newState => {\n      this.setState(newState).then(alert(\"Mock Correctly Loaded\"));\n    };\n\n    this.state.mocks[0] = initialData;\n    let defaultOrder = {};\n    let filledTeamIds = [];\n    var counter = 0;\n    this.state.globalPlayerPool = initialData.allPlayerIds;\n    initialData.draftOrder[0].map(function (value) {\n      defaultOrder['team-' + counter] = {\n        id: 'team-' + counter,\n        content: value\n      };\n      filledTeamIds.push('team-' + counter);\n      counter++;\n    });\n    this.state.mocks[0] = { ...this.state.mocks[0],\n      teams: defaultOrder,\n      columns: { ...this.state.mocks[0].columns,\n        'team-column': { ...this.state.mocks[0].columns['team-column'],\n          teamIds: filledTeamIds\n        },\n        'player-pool': { ...this.state.mocks[0].columns['player-pool'],\n          playerIds: this.state.globalPlayerPool\n        }\n      }\n    };\n  }\n\n  render() {\n    this.prevArrow = this.state.currentMock > 0;\n    this.nextArrow = this.state.currentMock < this.state.totalRounds - 1;\n    this.maxMockPages = this.state.totalRounds >= 3;\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      alt: \"Logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), \"Mocker\"), React.createElement(ToggleButtonGroup, {\n      type: \"radio\",\n      name: \"pages\",\n      size: \"lg\",\n      defaultValue: \"Create\",\n      className: \"btnGrp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(ToggleButton, {\n      variant: \"danger\",\n      value: \"About\",\n      disabled: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"About\"), React.createElement(ShareModal, {\n      teamInfo: this.state.message,\n      allData: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(ToggleButton, {\n      variant: \"danger\",\n      value: \"Share\",\n      active: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Share\"), \" \"), React.createElement(ToggleButton, {\n      variant: \"danger\",\n      value: \"Create\",\n      active: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Create\"), React.createElement(SaveModal, {\n      allData: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(ToggleButton, {\n      variant: \"danger\",\n      value: \"Save\",\n      disabled: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Save\")), React.createElement(LoadModal, {\n      allData: this.state,\n      changeMockCallback: this.loadMock,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(ToggleButton, {\n      variant: \"danger\",\n      value: \"Load\",\n      disabled: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Load\")), React.createElement(ToggleButton, {\n      variant: \"danger\",\n      value: \"More\",\n      disabled: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"More\"))), React.createElement(Mock, {\n      changeMockCallback: this.changeMockPageData,\n      mockPage: this.state.mocks[this.state.currentMock],\n      mockIndex: this.state.currentMock,\n      teamSetup: this.state.mocks[this.state.currentMock].teams,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Round \", this.state.currentMock + 1), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(Button, {\n      disabled: !this.prevArrow,\n      onClick: () => {\n        this.state.currentMock--;\n        this.setState({ ...this.state,\n          mocks: { ...this.state.mocks,\n            [this.state.currentMock]: { ...this.state.mocks[this.state.currentMock],\n              columns: { ...this.state.mocks[this.state.currentMock].columns,\n                'player-pool': { ...this.state.mocks[this.state.currentMock].columns['player-pool'],\n                  playerIds: this.state.globalPlayerPool\n                }\n              }\n            }\n          }\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"\\u2039\"), React.createElement(Button, {\n      onClick: () => {\n        this.addMockPage();\n        this.state.currentMock++;\n        this.setState(this.state);\n      },\n      disabled: this.maxMockPages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"+\"), React.createElement(Button, {\n      disabled: !this.nextArrow,\n      onClick: () => {\n        this.state.currentMock++;\n        this.setState({ ...this.state,\n          mocks: { ...this.state.mocks,\n            [this.state.currentMock]: { ...this.state.mocks[this.state.currentMock],\n              columns: { ...this.state.mocks[this.state.currentMock].columns,\n                'player-pool': { ...this.state.mocks[this.state.currentMock].columns['player-pool'],\n                  playerIds: this.state.globalPlayerPool\n                }\n              }\n            }\n          }\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"\\u203A\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/averyhiggins/Desktop/CS347/mock-app/src/App.js"],"names":["React","Mock","Container","ToggleButtonGroup","ToggleButton","ShareModal","LoadModal","SaveModal","Button","logo","initialData","playerFile2","App","Top","Component","addMockPage","index","state","totalRounds","setState","filledTeamIds2","defaultOrder2","counter","draftOrder","map","value","id","content","push","mocks","players","allPlayerIds","columns","title","teamIds","playerIds","globalPlayerPool","columnOrder","constructor","maxRounds","maxMockPages","prevArrow","nextArrow","currentMock","message","ids","teams","pickedPlayers","currentMockObj","changeMockPageData","newState","loadMock","then","alert","defaultOrder","filledTeamIds","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './css/App.css';\nimport Mock from './Mock';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ShareModal from './ShareModal';\nimport LoadModal from './LoadModal';\nimport SaveModal from './SaveModal';\nimport Button from 'react-bootstrap/Button';\nimport logo from './images/yellow_brown_logo.png';\nimport initialData from './initial-data.js';\nimport playerFile2 from './testPlayers.json'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n        integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n        crossorigin=\"anonymous\"\n      />\n\n      <Top />\n      <footer color=\"lightgrey\">developed by Avery Higgins, 2020</footer>\n\n    </div>\n  );\n}\n\n\nclass Top extends React.Component {\n\n  maxRounds = 3;\n  maxMockPages = false;\n\n  prevArrow= false\n  nextArrow= false\n\n  state = {\n    mocks: {},\n    currentMock: 0,\n    totalRounds: 1,\n    message: {\n      ids: [],\n      teams: [],\n      pickedPlayers: [],\n      players: []\n    },\n    currentMockObj: null,\n    globalPlayerPool: {}\n  }\n\n  changeMockPageData = (newState, index) => {\n\n    this.setState({\n      ...this.state,\n      globalPlayerPool: newState.columns['player-pool'].playerIds,\n      message: {\n        ids: newState.columns['team-column'].teamIds,\n        teams: newState.teams,\n        pickedPlayers: newState.columns['player-column'].playerIds,\n        players: newState.players\n      },\n      mocks: {\n        ...this.state.mocks,\n        [index]: newState\n      }\n\n    })\n  }\n\n  loadMock = (newState => {\n    this.setState(newState).then(\n      alert(\"Mock Correctly Loaded\")\n    )\n\n  })\n\n\n  addMockPage() {\n\n    let index = this.state.totalRounds\n    this.setState({ ...this.state, totalRounds: this.state.totalRounds++ })\n    let filledTeamIds2 = [];\n    let defaultOrder2 = {};\n    var counter = 32 * index;\n\n    initialData.draftOrder[index].map(function (value) {\n\n      defaultOrder2['team-' + counter] = (\n        {\n          id: 'team-' + counter,\n          content: value\n        }\n      )\n\n      filledTeamIds2.push('team-' + counter)\n      counter++;\n    }\n    )\n\n    //Creates first draft board\n    this.state.mocks[index] =\n      {\n        'teams': defaultOrder2,\n        'players': initialData.players,\n        allPlayerIds: playerFile2['ids'],\n\n        columns: {\n          'team-column': {\n            id: 'team-column',\n            title: 'Teams',\n            teamIds: filledTeamIds2\n          },\n\n          'player-column': {\n            id: 'player-column',\n            title: 'Picked Players',\n            playerIds: []\n          },\n\n          'player-pool': {\n            id: 'player-pool',\n            title: 'Player Pool',\n            playerIds: this.state.globalPlayerPool\n          }\n        },\n\n        columnOrder: ['team-column', 'player-column', 'player-pool']\n\n      }\n\n\n\n\n  }\n\n\n  constructor() {\n    super()\n    this.state.mocks[0] = initialData\n\n    let defaultOrder = {};\n    let filledTeamIds = []\n\n    var counter = 0;\n    this.state.globalPlayerPool = initialData.allPlayerIds\n\n    initialData.draftOrder[0].map(function (value) {\n\n      defaultOrder['team-' + counter] = (\n        {\n          id: 'team-' + counter,\n          content: value\n        }\n      )\n\n      filledTeamIds.push('team-' + counter)\n      counter++;\n    }\n    )\n\n    this.state.mocks[0] = {\n      ...this.state.mocks[0],\n      teams: defaultOrder,\n      columns: {\n        ...this.state.mocks[0].columns,\n        'team-column': {\n          ...this.state.mocks[0].columns['team-column'],\n          teamIds: filledTeamIds\n        },\n        'player-pool': {\n          ...this.state.mocks[0].columns['player-pool'],\n          playerIds: this.state.globalPlayerPool\n        }\n      }\n    }\n\n\n  }\n\n\n  render() {\n\n    this.prevArrow = this.state.currentMock > 0;\n    this.nextArrow = this.state.currentMock < this.state.totalRounds - 1;\n    this.maxMockPages = this.state.totalRounds >= 3;\n\n    return (\n\n      <Container>\n\n        <div className=\"Header\">\n\n          <h1 className=\"logo\">\n            <img src={logo} alt=\"Logo\" />Mocker\n          </h1>\n\n          <ToggleButtonGroup type=\"radio\" name=\"pages\" size=\"lg\" defaultValue=\"Create\" className=\"btnGrp\" >\n            <ToggleButton variant=\"danger\" value=\"About\" disabled=\"true\">About</ToggleButton>\n\n            <ShareModal teamInfo={this.state.message} allData={this.state}><ToggleButton variant=\"danger\" value=\"Share\" active>Share</ToggleButton> </ShareModal>\n\n            <ToggleButton variant=\"danger\" value=\"Create\" active>Create</ToggleButton>\n            <SaveModal allData={this.state}><ToggleButton variant=\"danger\" value=\"Save\" disabled=\"true\">Save</ToggleButton></SaveModal>\n            <LoadModal allData={this.state} changeMockCallback={this.loadMock}><ToggleButton variant=\"danger\" value=\"Load\" disabled=\"true\">Load</ToggleButton></LoadModal>\n            <ToggleButton variant=\"danger\" value=\"More\" disabled=\"true\">More</ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n\n        <Mock changeMockCallback={this.changeMockPageData} mockPage={this.state.mocks[this.state.currentMock]} mockIndex={this.state.currentMock}\n          teamSetup={this.state.mocks[this.state.currentMock].teams} />\n\n        <b>Round {this.state.currentMock + 1}</b><br />\n\n        <Button disabled={!this.prevArrow} onClick={() => {\n\n          this.state.currentMock--\n          this.setState({\n            ...this.state,\n            mocks: {\n              ...this.state.mocks,\n              [this.state.currentMock]: {\n                ...this.state.mocks[this.state.currentMock],\n                columns: {\n                  ...this.state.mocks[this.state.currentMock].columns,\n                  'player-pool': {\n                    ...this.state.mocks[this.state.currentMock].columns['player-pool'],\n                    playerIds: this.state.globalPlayerPool\n                  }\n                }\n              }\n            }\n          })\n\n\n        }}>&#8249;</Button>\n\n        <Button onClick={() => {\n          this.addMockPage()\n          this.state.currentMock++\n          this.setState(this.state)\n\n        }} disabled={this.maxMockPages}>+</Button>\n\n        <Button disabled={!this.nextArrow} onClick={() => {\n          this.state.currentMock++\n          this.setState({\n            ...this.state,\n            mocks: {\n              ...this.state.mocks,\n              [this.state.currentMock]: {\n                ...this.state.mocks[this.state.currentMock],\n                columns: {\n                  ...this.state.mocks[this.state.currentMock].columns,\n                  'player-pool': {\n                    ...this.state.mocks[this.state.currentMock].columns['player-pool'],\n                    playerIds: this.state.globalPlayerPool\n                  }\n                }\n              }\n            }\n          })\n        }} >&#8250;</Button>\n      </Container>\n\n\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}