{"ast":null,"code":"var _jsxFileName = \"/Users/averyhiggins/Desktop/CS347/mock-app/src/Mock.js\";\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Table from 'react-bootstrap/Table';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Mock.css';\nimport teamData from './team-data';\n\nfunction DraftCard(props) {\n  return React.createElement(Card, {\n    className: \"teamCard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \" \", teamData[props.value], \" \"));\n}\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nconst getItemStyle = (isDragging, DraggableStyle) => ({\n  userSelect: \"none\",\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n  ...DraggableStyle\n});\n\nconst grid = 8;\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 700\n});\n\nclass GenerateList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      orderTeams: props.value,\n      orderPlayers: Array(32).fill(null)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const orderTeams = reorder(this.state.orderTeams, result.source.index, result.destination.index);\n    this.setState({\n      orderTeams\n    });\n  }\n\n  renderTeamCard(i) {\n    return React.createElement(DraftCard, {\n      value: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const currentTeams = this.state.orderTeams.slice();\n    return React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Droppable, {\n      droppableId: \"droppable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"table\", {\n      ref: provided.innerRef,\n      style: getListStyle(snapshot.isDraggingOver),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Team\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.orderTeams.map((value, index) => React.createElement(Draggable, {\n      key: value.id,\n      draggableId: value.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"tr\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, this.renderTeamCard(value.content))))), provided.placeholder))));\n  }\n\n}\n\nfunction Mock() {\n  let defaultOrder = [];\n\n  for (var i = 0; i < 32; i++) {\n    defaultOrder.push({\n      id: 'item-' + i,\n      content: i\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"draftTable\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }));\n}\n\nexport default Mock;","map":{"version":3,"sources":["/Users/averyhiggins/Desktop/CS347/mock-app/src/Mock.js"],"names":["React","Card","Container","Table","DragDropContext","Droppable","Draggable","teamData","DraftCard","props","value","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","getItemStyle","isDragging","DraggableStyle","userSelect","background","grid","getListStyle","isDraggingOver","padding","width","GenerateList","Component","constructor","state","orderTeams","orderPlayers","fill","onDragEnd","bind","destination","source","index","setState","renderTeamCard","i","render","currentTeams","slice","provided","snapshot","innerRef","map","id","draggableProps","dragHandleProps","style","content","placeholder","Mock","defaultOrder","push"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Table from 'react-bootstrap/Table'\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Mock.css';\nimport teamData from './team-data'\n\n\nfunction DraftCard(props) {\n\n    return (\n        <Card className=\"teamCard\">\n            <Card.Body> {teamData[props.value]} </Card.Body>\n        </Card>\n    )\n\n}\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nconst getItemStyle = (isDragging, DraggableStyle) => ({\n    userSelect: \"none\",\n\n    // change background colour if dragging\n    background: isDragging ? \"lightgreen\" : \"grey\",\n\n    ...DraggableStyle\n\n});\n\nconst grid = 8;\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n    padding: grid,\n    width: 700\n\n});\n\n\nclass GenerateList extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            orderTeams: props.value,\n            orderPlayers: Array(32).fill(null),\n        }\n\n        this.onDragEnd = this.onDragEnd.bind(this);\n\n    }\n\n\n    onDragEnd(result) {\n        // dropped outside the list\n        if (!result.destination) {\n            return;\n        }\n\n        const orderTeams = reorder(\n            this.state.orderTeams,\n            result.source.index,\n            result.destination.index\n        );\n\n        this.setState({\n            orderTeams\n        })\n    }\n\n\n    renderTeamCard(i) {\n        return <DraftCard value={i} />;\n    }\n\n    render() {\n\n        const currentTeams = this.state.orderTeams.slice()\n\n        return (\n\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <Droppable droppableId=\"droppable\">\n\n                    {(provided, snapshot) => (\n                        <table\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}\n                            >\n                            <thead>\n                                <tr>\n                                    <th>Team</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.state.orderTeams.map((value, index) => (\n                                    <Draggable key={value.id} draggableId={value.id} index={index}>\n                                        {(provided, snapshot) => (\n                                            <tr\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                style={getItemStyle(\n                                                    snapshot.isDragging,\n                                                    provided.draggableProps.style\n                                                )}\n                                            >\n                                                <td>{this.renderTeamCard(value.content)}</td>\n                                            </tr>\n                                        )}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </tbody>\n                        </table>\n                    )}\n                </Droppable>\n            </DragDropContext>\n\n        );\n\n    }\n\n\n\n}\n\n\n\nfunction Mock() {\n\n\n    let defaultOrder = []\n\n    for (var i = 0; i < 32; i++) {\n        defaultOrder.push(\n            {\n                id: 'item-' + i,\n                content: i\n            }\n        )\n    }\n\n\n\n\n\n    return (\n        <div className=\"draftTable\">\n            <Container>\n\n            </Container>\n        </div>\n    );\n}\n\nexport default Mock;"]},"metadata":{},"sourceType":"module"}