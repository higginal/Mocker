{"ast":null,"code":"var _jsxFileName = \"/Users/averyhiggins/Desktop/CS347/mock-app/src/Mock.js\";\nimport React from 'react';\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport './css/Mock.css';\nimport TeamColumn from './TeamColumn';\nimport PlayerColumn from './PlayerColumn';\nimport PlayerPool from './PlayerPool';\nimport initialData from './initial-data.js';\nimport styled from 'styled-components';\nconst DraftTable = styled.div`\n    display: flex;\n    width: 80%;\n    margin: auto;\n    overflow-y: scroll;\n    border-style: solid;\n    border-radius: 10px;\n    margin-bottom: 2%;\n`;\nexport default class Mock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = initialData;\n\n    this.refreshTable = () => {\n      this.setState(this.state);\n    };\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      if (source.droppableId === \"team-column\" && destination.droppableId !== \"team-column\" || source.droppableId !== \"team-column\" && destination.droppableId === \"team-column\") {\n        return;\n      }\n\n      if (source.droppableId === \"team-column\" && destination.droppableId === \"team-column\") {\n        //For the team order\n        const column = this.props.mockPage.columns[source.droppableId];\n        const newTeamIds = Array.from(column.teamIds);\n        newTeamIds.splice(source.index, 1);\n        newTeamIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...column,\n          teamIds: newTeamIds\n        };\n        const newState = { ...this.props.mockPage,\n          columns: { ...this.props.mockPage.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.props.changeMockCallback(newState, this.props.mockIndex);\n      } else {\n        //For the players\n        const startColumn = this.props.mockPage.columns[source.droppableId];\n        const finishColumn = this.props.mockPage.columns[destination.droppableId];\n\n        if (startColumn === finishColumn) {\n          //If in the same column\n          const column = startColumn;\n          const newPlayerIds = Array.from(column.playerIds);\n          newPlayerIds.splice(source.index, 1);\n          newPlayerIds.splice(destination.index, 0, draggableId);\n          const newColumn = { ...column,\n            playerIds: newPlayerIds\n          };\n          const newState = { ...this.props.mockPage,\n            columns: { ...this.props.mockPage.columns,\n              [newColumn.id]: newColumn\n            }\n          };\n          this.props.changeMockCallback(newState, this.props.mockIndex);\n        } else {\n          // if to different column\n          if (finishColumn.id === 'player-column' && finishColumn.playerIds.length >= this.props.mockPage.columns[\"team-column\"].teamIds.length) {\n            return;\n          }\n\n          const startPlayerIds = Array.from(startColumn.playerIds);\n          startPlayerIds.splice(source.index, 1);\n          const finishPlayerIds = Array.from(finishColumn.playerIds);\n          finishPlayerIds.splice(destination.index, 0, draggableId);\n          const newStartColumn = { ...startColumn,\n            playerIds: startPlayerIds\n          };\n          const newFinishColumn = { ...finishColumn,\n            playerIds: finishPlayerIds\n          };\n          const newAltState = { ...this.props.mockPage,\n            columns: { ...this.props.mockPage.columns,\n              [newStartColumn.id]: newStartColumn,\n              [newFinishColumn.id]: newFinishColumn\n            }\n          };\n          this.props.changeMockCallback(newAltState, this.props.mockIndex);\n        }\n      }\n    };\n\n    this.state = props.mockPage;\n  }\n\n  render() {\n    return React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(DraftTable, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, this.props.mockPage.columnOrder.map(columnId => {\n      const teamColumn = this.props.mockPage.columns[columnId];\n\n      if (columnId === 'team-column') {\n        const actualTeams = teamColumn.teamIds;\n        return React.createElement(TeamColumn, {\n          key: teamColumn.id,\n          title: \"Teams\",\n          teamIds: actualTeams,\n          column: teamColumn,\n          teams: this.props.teamSetup,\n          round: this.props.mockIndex,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        });\n      }\n\n      if (columnId === 'player-column') {\n        const players = this.props.mockPage.players;\n        const pickedPlayers = teamColumn.playerIds;\n        return React.createElement(PlayerColumn, {\n          key: teamColumn.id,\n          playerIds: pickedPlayers,\n          column: teamColumn,\n          players: players,\n          allPlayerIds: this.props.mockPage.allPlayerIds,\n          teamColumn: this.props.mockPage.columns['team-column'],\n          teams: this.props.mockPage.teams,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        });\n      }\n\n      if (columnId === 'player-pool') {\n        const players = this.props.mockPage.players;\n        const unpickedPlayers = teamColumn.playerIds;\n        return React.createElement(PlayerPool, {\n          key: teamColumn.id,\n          playerIds: unpickedPlayers,\n          column: teamColumn,\n          players: players,\n          allPlayerIds: this.props.mockPage.allPlayerIds,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        });\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/averyhiggins/Desktop/CS347/mock-app/src/Mock.js"],"names":["React","DragDropContext","TeamColumn","PlayerColumn","PlayerPool","initialData","styled","DraftTable","div","Mock","Component","constructor","props","state","refreshTable","setState","onDragEnd","result","destination","source","draggableId","droppableId","index","column","mockPage","columns","newTeamIds","Array","from","teamIds","splice","newColumn","newState","id","changeMockCallback","mockIndex","startColumn","finishColumn","newPlayerIds","playerIds","length","startPlayerIds","finishPlayerIds","newStartColumn","newFinishColumn","newAltState","render","columnOrder","map","columnId","teamColumn","actualTeams","teamSetup","players","pickedPlayers","allPlayerIds","teams","unpickedPlayers"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport './css/Mock.css';\nimport TeamColumn from './TeamColumn';\nimport PlayerColumn from './PlayerColumn';\nimport PlayerPool from './PlayerPool';\nimport initialData from './initial-data.js';\nimport styled from 'styled-components';\n\n\nconst DraftTable = styled.div`\n    display: flex;\n    width: 80%;\n    margin: auto;\n    overflow-y: scroll;\n    border-style: solid;\n    border-radius: 10px;\n    margin-bottom: 2%;\n`;\n\n\n\nexport default class Mock extends React.Component {\n\n    state = initialData;\n\n\n    refreshTable = () => {\n\n        this.setState(this.state)\n\n    }\n\n    constructor(props) {\n\n        super(props)\n        this.state = props.mockPage\n\n    }\n\n    onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n            return;\n        }\n\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n\n        if (source.droppableId === \"team-column\" && destination.droppableId !== \"team-column\" ||\n            source.droppableId !== \"team-column\" && destination.droppableId === \"team-column\") {\n            return;\n        }\n\n        if (source.droppableId === \"team-column\" && destination.droppableId === \"team-column\") {\n            //For the team order\n            const column = this.props.mockPage.columns[source.droppableId];\n            const newTeamIds = Array.from(column.teamIds)\n\n            newTeamIds.splice(source.index, 1)\n            newTeamIds.splice(destination.index, 0, draggableId)\n\n            const newColumn = {\n                ...column,\n                teamIds: newTeamIds,\n            };\n\n            const newState = {\n                ...this.props.mockPage,\n                columns: {\n                    ...this.props.mockPage.columns,\n                    [newColumn.id]: newColumn\n                }\n            };\n\n\n            \n            this.props.changeMockCallback(newState, this.props.mockIndex)\n\n            \n        } else {\n            //For the players\n            const startColumn = this.props.mockPage.columns[source.droppableId];\n            const finishColumn = this.props.mockPage.columns[destination.droppableId];\n\n\n            if (startColumn === finishColumn) { //If in the same column\n                const column = startColumn;\n                const newPlayerIds = Array.from(column.playerIds)\n\n                newPlayerIds.splice(source.index, 1)\n                newPlayerIds.splice(destination.index, 0, draggableId)\n\n                const newColumn = {\n                    ...column,\n                    playerIds: newPlayerIds,\n                };\n\n                const newState = {\n                    ...this.props.mockPage,\n                    columns: {\n                        ...this.props.mockPage.columns,\n                        [newColumn.id]: newColumn\n                    },\n                };\n\n\n                this.props.changeMockCallback(newState, this.props.mockIndex)\n\n\n            } else {\n                // if to different column\n\n                if (finishColumn.id === 'player-column' && finishColumn.playerIds.length >= this.props.mockPage.columns[\"team-column\"].teamIds.length) {\n\n                    return\n                }\n\n                const startPlayerIds = Array.from(startColumn.playerIds)\n                startPlayerIds.splice(source.index, 1)\n                const finishPlayerIds = Array.from(finishColumn.playerIds)\n                finishPlayerIds.splice(destination.index, 0, draggableId)\n\n                const newStartColumn = {\n                    ...startColumn,\n                    playerIds: startPlayerIds,\n                };\n\n                const newFinishColumn = {\n                    ...finishColumn,\n                    playerIds: finishPlayerIds\n                };\n\n                const newAltState = {\n                    ...this.props.mockPage,\n                    columns: {\n                        ...this.props.mockPage.columns,\n                        [newStartColumn.id]: newStartColumn,\n                        [newFinishColumn.id]: newFinishColumn\n                    },\n\n                };\n\n                this.props.changeMockCallback(newAltState, this.props.mockIndex);\n\n            }\n        }\n\n\n    }\n\n\n\n    render() {\n\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <DraftTable>\n                    {this.props.mockPage.columnOrder.map(columnId => {\n\n                        const teamColumn = this.props.mockPage.columns[columnId];\n\n                        if (columnId === 'team-column') {\n                            \n                            const actualTeams = teamColumn.teamIds;\n\n                            return <TeamColumn key={teamColumn.id} title=\"Teams\" teamIds={actualTeams} column={teamColumn} teams={this.props.teamSetup} round={this.props.mockIndex}/>\n                        }\n\n                        if (columnId === 'player-column') {\n\n                            const players = this.props.mockPage.players;\n                            const pickedPlayers = teamColumn.playerIds;\n\n                            return <PlayerColumn key={teamColumn.id} playerIds={pickedPlayers} column={teamColumn}\n                                players={players} allPlayerIds={this.props.mockPage.allPlayerIds} teamColumn={this.props.mockPage.columns['team-column']}\n                                teams={this.props.mockPage.teams} />\n                        }\n\n                        if (columnId === 'player-pool') {\n                            const players = this.props.mockPage.players;\n                            const unpickedPlayers = teamColumn.playerIds;\n                            return <PlayerPool key={teamColumn.id} playerIds={unpickedPlayers} column={teamColumn} players={players} allPlayerIds={this.props.mockPage.allPlayerIds} />\n                        }\n\n                    })\n                    }\n                </DraftTable>\n\n            </DragDropContext>\n\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}