{"ast":null,"code":"import _defineProperty from\"/Users/averyhiggins/Desktop/CS347/mock-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/averyhiggins/Desktop/CS347/mock-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/averyhiggins/Desktop/CS347/mock-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/averyhiggins/Desktop/CS347/mock-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/averyhiggins/Desktop/CS347/mock-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/averyhiggins/Desktop/CS347/mock-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/averyhiggins/Desktop/CS347/mock-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _taggedTemplateLiteral from\"/Users/averyhiggins/Desktop/CS347/mock-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n    display: flex;\\n    width: 80%;\\n    margin: auto;\\n    overflow-y: scroll;\\n    border-style: solid;\\n    border-radius: 10px;\\n    margin-bottom: 2%;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React from'react';import{DragDropContext}from\"react-beautiful-dnd\";import'./css/Mock.css';import TeamColumn from'./TeamColumn';import PlayerColumn from'./PlayerColumn';import PlayerPool from'./PlayerPool';import initialData from'./initial-data.js';import styled from'styled-components';var DraftTable=styled.div(_templateObject());var Mock=/*#__PURE__*/function(_React$Component){_inherits(Mock,_React$Component);function Mock(props){var _this;_classCallCheck(this,Mock);_this=_possibleConstructorReturn(this,_getPrototypeOf(Mock).call(this,props));_this.state=initialData;_this.refreshTable=function(){_this.setState(_this.state);};_this.onDragEnd=function(result){var destination=result.destination,source=result.source,draggableId=result.draggableId;if(!destination){return;}if(destination.droppableId===source.droppableId&&destination.index===source.index){return;}if(source.droppableId===\"team-column\"&&destination.droppableId!==\"team-column\"||source.droppableId!==\"team-column\"&&destination.droppableId===\"team-column\"){return;}if(source.droppableId===\"team-column\"&&destination.droppableId===\"team-column\"){//For the team order\nvar column=_this.props.mockPage.columns[source.droppableId];var newTeamIds=Array.from(column.teamIds);newTeamIds.splice(source.index,1);newTeamIds.splice(destination.index,0,draggableId);var newColumn=_objectSpread({},column,{teamIds:newTeamIds});var newState=_objectSpread({},_this.props.mockPage,{columns:_objectSpread({},_this.props.mockPage.columns,_defineProperty({},newColumn.id,newColumn))});_this.props.changeMockCallback(newState,_this.props.mockIndex);}else{//For the players\nvar startColumn=_this.props.mockPage.columns[source.droppableId];var finishColumn=_this.props.mockPage.columns[destination.droppableId];if(startColumn===finishColumn){//If in the same column\nvar _column=startColumn;var newPlayerIds=Array.from(_column.playerIds);newPlayerIds.splice(source.index,1);newPlayerIds.splice(destination.index,0,draggableId);var _newColumn=_objectSpread({},_column,{playerIds:newPlayerIds});var _newState=_objectSpread({},_this.props.mockPage,{columns:_objectSpread({},_this.props.mockPage.columns,_defineProperty({},_newColumn.id,_newColumn))});_this.props.changeMockCallback(_newState,_this.props.mockIndex);}else{var _objectSpread4;// if to different column\nif(finishColumn.id==='player-column'&&finishColumn.playerIds.length>=_this.props.mockPage.columns[\"team-column\"].teamIds.length){return;}var startPlayerIds=Array.from(startColumn.playerIds);startPlayerIds.splice(source.index,1);var finishPlayerIds=Array.from(finishColumn.playerIds);finishPlayerIds.splice(destination.index,0,draggableId);var newStartColumn=_objectSpread({},startColumn,{playerIds:startPlayerIds});var newFinishColumn=_objectSpread({},finishColumn,{playerIds:finishPlayerIds});var newAltState=_objectSpread({},_this.props.mockPage,{columns:_objectSpread({},_this.props.mockPage.columns,(_objectSpread4={},_defineProperty(_objectSpread4,newStartColumn.id,newStartColumn),_defineProperty(_objectSpread4,newFinishColumn.id,newFinishColumn),_objectSpread4))});_this.props.changeMockCallback(newAltState,_this.props.mockIndex);}}};_this.state=props.mockPage;return _this;}_createClass(Mock,[{key:\"render\",value:function render(){var _this2=this;return React.createElement(DragDropContext,{onDragEnd:this.onDragEnd},React.createElement(DraftTable,null,this.props.mockPage.columnOrder.map(function(columnId){var teamColumn=_this2.props.mockPage.columns[columnId];if(columnId==='team-column'){var actualTeams=teamColumn.teamIds;return React.createElement(TeamColumn,{key:teamColumn.id,title:\"Teams\",teamIds:actualTeams,column:teamColumn,teams:_this2.props.teamSetup,round:_this2.props.mockIndex});}if(columnId==='player-column'){var players=_this2.props.mockPage.players;var pickedPlayers=teamColumn.playerIds;return React.createElement(PlayerColumn,{key:teamColumn.id,playerIds:pickedPlayers,column:teamColumn,players:players,allPlayerIds:_this2.props.mockPage.allPlayerIds,teamColumn:_this2.props.mockPage.columns['team-column'],teams:_this2.props.mockPage.teams});}if(columnId==='player-pool'){var _players=_this2.props.mockPage.players;var unpickedPlayers=teamColumn.playerIds;return React.createElement(PlayerPool,{key:teamColumn.id,playerIds:unpickedPlayers,column:teamColumn,players:_players,allPlayerIds:_this2.props.mockPage.allPlayerIds});}})));}}]);return Mock;}(React.Component);export{Mock as default};","map":{"version":3,"sources":["/Users/averyhiggins/Desktop/CS347/mock-app/src/Mock.js"],"names":["React","DragDropContext","TeamColumn","PlayerColumn","PlayerPool","initialData","styled","DraftTable","div","Mock","props","state","refreshTable","setState","onDragEnd","result","destination","source","draggableId","droppableId","index","column","mockPage","columns","newTeamIds","Array","from","teamIds","splice","newColumn","newState","id","changeMockCallback","mockIndex","startColumn","finishColumn","newPlayerIds","playerIds","length","startPlayerIds","finishPlayerIds","newStartColumn","newFinishColumn","newAltState","columnOrder","map","columnId","teamColumn","actualTeams","teamSetup","players","pickedPlayers","allPlayerIds","teams","unpickedPlayers","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport './css/Mock.css';\nimport TeamColumn from './TeamColumn';\nimport PlayerColumn from './PlayerColumn';\nimport PlayerPool from './PlayerPool';\nimport initialData from './initial-data.js';\nimport styled from 'styled-components';\n\n\nconst DraftTable = styled.div`\n    display: flex;\n    width: 80%;\n    margin: auto;\n    overflow-y: scroll;\n    border-style: solid;\n    border-radius: 10px;\n    margin-bottom: 2%;\n`;\n\n\n\nexport default class Mock extends React.Component {\n\n    state = initialData;\n\n\n    refreshTable = () => {\n\n        this.setState(this.state)\n\n    }\n\n    constructor(props) {\n\n        super(props)\n        this.state = props.mockPage\n\n    }\n\n    onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n            return;\n        }\n\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n\n        if (source.droppableId === \"team-column\" && destination.droppableId !== \"team-column\" ||\n            source.droppableId !== \"team-column\" && destination.droppableId === \"team-column\") {\n            return;\n        }\n\n        if (source.droppableId === \"team-column\" && destination.droppableId === \"team-column\") {\n            //For the team order\n            const column = this.props.mockPage.columns[source.droppableId];\n            const newTeamIds = Array.from(column.teamIds)\n\n            newTeamIds.splice(source.index, 1)\n            newTeamIds.splice(destination.index, 0, draggableId)\n\n            const newColumn = {\n                ...column,\n                teamIds: newTeamIds,\n            };\n\n            const newState = {\n                ...this.props.mockPage,\n                columns: {\n                    ...this.props.mockPage.columns,\n                    [newColumn.id]: newColumn\n                }\n            };\n\n\n            \n            this.props.changeMockCallback(newState, this.props.mockIndex)\n\n            \n        } else {\n            //For the players\n            const startColumn = this.props.mockPage.columns[source.droppableId];\n            const finishColumn = this.props.mockPage.columns[destination.droppableId];\n\n\n            if (startColumn === finishColumn) { //If in the same column\n                const column = startColumn;\n                const newPlayerIds = Array.from(column.playerIds)\n\n                newPlayerIds.splice(source.index, 1)\n                newPlayerIds.splice(destination.index, 0, draggableId)\n\n                const newColumn = {\n                    ...column,\n                    playerIds: newPlayerIds,\n                };\n\n                const newState = {\n                    ...this.props.mockPage,\n                    columns: {\n                        ...this.props.mockPage.columns,\n                        [newColumn.id]: newColumn\n                    },\n                };\n\n\n                this.props.changeMockCallback(newState, this.props.mockIndex)\n\n\n            } else {\n                // if to different column\n\n                if (finishColumn.id === 'player-column' && finishColumn.playerIds.length >= this.props.mockPage.columns[\"team-column\"].teamIds.length) {\n\n                    return\n                }\n\n                const startPlayerIds = Array.from(startColumn.playerIds)\n                startPlayerIds.splice(source.index, 1)\n                const finishPlayerIds = Array.from(finishColumn.playerIds)\n                finishPlayerIds.splice(destination.index, 0, draggableId)\n\n                const newStartColumn = {\n                    ...startColumn,\n                    playerIds: startPlayerIds,\n                };\n\n                const newFinishColumn = {\n                    ...finishColumn,\n                    playerIds: finishPlayerIds\n                };\n\n                const newAltState = {\n                    ...this.props.mockPage,\n                    columns: {\n                        ...this.props.mockPage.columns,\n                        [newStartColumn.id]: newStartColumn,\n                        [newFinishColumn.id]: newFinishColumn\n                    },\n\n                };\n\n                this.props.changeMockCallback(newAltState, this.props.mockIndex);\n\n            }\n        }\n\n\n    }\n\n\n\n    render() {\n\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <DraftTable>\n                    {this.props.mockPage.columnOrder.map(columnId => {\n\n                        const teamColumn = this.props.mockPage.columns[columnId];\n\n                        if (columnId === 'team-column') {\n                            \n                            const actualTeams = teamColumn.teamIds;\n\n                            return <TeamColumn key={teamColumn.id} title=\"Teams\" teamIds={actualTeams} column={teamColumn} teams={this.props.teamSetup} round={this.props.mockIndex}/>\n                        }\n\n                        if (columnId === 'player-column') {\n\n                            const players = this.props.mockPage.players;\n                            const pickedPlayers = teamColumn.playerIds;\n\n                            return <PlayerColumn key={teamColumn.id} playerIds={pickedPlayers} column={teamColumn}\n                                players={players} allPlayerIds={this.props.mockPage.allPlayerIds} teamColumn={this.props.mockPage.columns['team-column']}\n                                teams={this.props.mockPage.teams} />\n                        }\n\n                        if (columnId === 'player-pool') {\n                            const players = this.props.mockPage.players;\n                            const unpickedPlayers = teamColumn.playerIds;\n                            return <PlayerPool key={teamColumn.id} playerIds={unpickedPlayers} column={teamColumn} players={players} allPlayerIds={this.props.mockPage.allPlayerIds} />\n                        }\n\n                    })\n                    }\n                </DraftTable>\n\n            </DragDropContext>\n\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}