{"ast":null,"code":"var _jsxFileName = \"/Users/averyhiggins/Desktop/CS347/mock-app/src/Mock.js\";\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Table from 'react-bootstrap/Table';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Mock.css';\nimport teamData from './team-data';\nimport TeamColumn from './TeamColumn';\nimport initialData from './initial-data.js';\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nconst getItemStyle = (isDragging, DraggableStyle) => ({\n  userSelect: \"none\",\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n  ...DraggableStyle\n});\n\nconst grid = 8;\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 700\n});\n\nclass GenerateList extends React.Component {\n  render() {\n    return React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Monkey\");\n  }\n\n}\n\nexport default class Mock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = initialData;\n\n    this.sendData = () => {\n      this.props.parentCallback(this.state.columns['team-column'].teamIds);\n    };\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const column = this.state.columns[source.droppableId];\n      const newTeamIds = Array.from(column.teamIds);\n      newTeamIds.splice(source.index, 1);\n      newTeamIds.splice(destination.index, 0, draggableId); //console.log(newTeamIds)\n\n      const newColumn = { ...column,\n        teamIds: newTeamIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      }; //alert(this.state.columns.teamIds)\n      //alert(newState.columns.teamIds)\n\n      this.setState(newState);\n    };\n\n    let defaultOrder = {};\n    let filledTeamIds = [];\n\n    for (var i = 0; i < 32; i++) {\n      defaultOrder['team-' + i] = {\n        id: 'team-' + i,\n        content: i\n      };\n      filledTeamIds.push('team-' + i);\n    }\n\n    this.state = { ...this.state,\n      teams: defaultOrder,\n      columns: { ...this.state.columns,\n        ['team-column']: { ...this.state.columns['team-column'],\n          teamIds: filledTeamIds\n        }\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"draftTable\",\n      onClick: this.sendData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, this.state.columnOrder.map(columnId => {\n      //alert(columnId)\n      const teamColumn = this.state.columns[columnId]; //alert(teamColumn.id)\n\n      if (columnId === 'team-column') {\n        const teams = this.state.teams;\n        const actualTeams = teamColumn.teamIds; //const teamIds = teams.map(teamId => this.state.teams)\n        //teamColumn.teamIds = Array(teams);\n\n        return React.createElement(TeamColumn, {\n          key: teamColumn.id,\n          title: \"Teams\",\n          teamIds: actualTeams,\n          column: teamColumn,\n          teams: teams,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        });\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/averyhiggins/Desktop/CS347/mock-app/src/Mock.js"],"names":["React","Card","Container","Table","DragDropContext","Droppable","Draggable","teamData","TeamColumn","initialData","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","getItemStyle","isDragging","DraggableStyle","userSelect","background","grid","getListStyle","isDraggingOver","padding","width","GenerateList","Component","render","Mock","constructor","props","state","sendData","parentCallback","columns","teamIds","onDragEnd","destination","source","draggableId","droppableId","index","column","newTeamIds","newColumn","newState","id","setState","defaultOrder","filledTeamIds","i","content","push","teams","columnOrder","map","columnId","teamColumn","actualTeams"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Table from 'react-bootstrap/Table'\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Mock.css';\nimport teamData from './team-data';\nimport TeamColumn from './TeamColumn';\nimport initialData from './initial-data.js'\n\n\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nconst getItemStyle = (isDragging, DraggableStyle) => ({\n    userSelect: \"none\",\n\n    // change background colour if dragging\n    background: isDragging ? \"lightgreen\" : \"grey\",\n\n    ...DraggableStyle\n\n});\n\nconst grid = 8;\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n    padding: grid,\n    width: 700\n\n});\n\n\nclass GenerateList extends React.Component {\n\n    render() {\n        return <b>Monkey</b>\n    }\n\n}\n\n\n\nexport default class Mock extends React.Component {\n\n    state = initialData;\n\n    sendData = () => {\n        this.props.parentCallback(this.state.columns['team-column'].teamIds);\n    }\n\n    constructor(props) {\n        super(props)\n\n        let defaultOrder = {};\n        let filledTeamIds = []\n\n        for (var i = 0; i < 32; i++) {\n            defaultOrder['team-' + i] = (\n                {\n                    id: 'team-' + i,\n                    content: i\n                }\n            )\n            filledTeamIds.push('team-' + i)\n        }\n\n\n        this.state = {\n            ...this.state,\n            teams: defaultOrder,\n            columns: {\n                ...this.state.columns,\n                ['team-column'] : {\n                    ...this.state.columns['team-column'],\n                    teamIds : filledTeamIds\n                }\n            }\n        }\n\n    }\n\n    onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n            return;\n        }\n\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n\n        const column = this.state.columns[source.droppableId];\n        const newTeamIds = Array.from(column.teamIds)\n\n        newTeamIds.splice(source.index, 1)        \n        newTeamIds.splice(destination.index, 0, draggableId)\n\n        //console.log(newTeamIds)\n        \n\n        const newColumn = {\n            ...column,\n            teamIds: newTeamIds,\n        };\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newColumn.id]: newColumn\n            },\n        };\n\n        //alert(this.state.columns.teamIds)\n        //alert(newState.columns.teamIds)\n       \n        this.setState(newState)\n\n    }\n    render() {\n\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <div className=\"draftTable\"\n                    onClick={this.sendData}>\n                    {this.state.columnOrder.map(columnId => {\n                        //alert(columnId)\n                        const teamColumn = this.state.columns[columnId];\n\n                        //alert(teamColumn.id)\n                        if (columnId === 'team-column') {\n                            const teams = this.state.teams;\n                            const actualTeams = teamColumn.teamIds;\n                            //const teamIds = teams.map(teamId => this.state.teams)\n                            //teamColumn.teamIds = Array(teams);\n\n                            return <TeamColumn key={teamColumn.id} title=\"Teams\" teamIds={actualTeams} column={teamColumn} teams={teams} />\n                        }\n                    })\n                    }\n                </div>\n                \n            </DragDropContext>\n            \n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}